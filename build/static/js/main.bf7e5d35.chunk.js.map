{"version":3,"sources":["components/Log.js","containers/LogPreview.js","components/DropTarget.js","App.js","serviceWorker.js","index.js"],"names":["Log","props","match","timestamp","Date","toUTCString","formattedDate","className","pId","process","level","message","parseRawLogLine","line","items","parseInt","LogPreview","logs","files","reduce","result","file","rawLogLines","content","trim","split","push","map","sort","a","b","useState","filter","updateFilter","onFilterChange","useCallback","event","target","value","regexFilterActive","updateRegexFilter","onClickRegexFilter","regexFilterClassNames","reg","RegExp","log","error","includes","getFilteredLogs","join","onClick","placeholder","onChange","index","key","pid","baseStyle","height","width","display","fontSize","textStyle","margin","TargetBox","onDrop","useDrop","accept","NativeTypes","FILE","drop","item","monitor","collect","isOver","canDrop","isActive","boxStyle","Object","assign","position","ref","style","App","updateFiles","getItem","forEach","fileName","name","reader","FileReader","onload","concat","readAsText","DndProvider","backend","Backend","DropTarget","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.bf7e5d35.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Log(props) {\n  let date = props.timestamp instanceof Date ? props.timestamp : new Date(props.timestamp),\n      match = date.toUTCString().match(\", (.*) GMT\"),\n      formattedDate = match ? match[1]: 'unknown';\n\n  return (\n    <div className=\"postman-log\">\n      <div className=\"pId\">{props.pId}</div>\n      <div className=\"timestamp\">{formattedDate}</div>\n      <div className=\"process\">{props.process}</div>\n      <div className=\"level\">{props.level}</div>\n      <div className=\"message\">{props.message}</div>\n    </div>\n  );\n}\n\nexport default Log;\n","import React, {useState, useCallback} from \"react\";\nimport Log from \"../components/Log\";\n\nfunction parseRawLogLine (line) {\n  let items = line.match(\n    /\\[([^\\]]+)\\]\\[([^\\]]+)\\]\\[([^\\]]+)\\]\\[([^\\]]+)\\]\\[(.+)\\]/\n  );\n\n  if (!items) {\n    return;\n  }\n\n  return {\n    pId: items[1],\n    timestamp: new Date(parseInt(items[2], 10)),\n    process: items[3],\n    level: items[4],\n    message: items[5]\n  };\n}\n\nfunction getFilteredLogs(logs, filter, {regexFilterActive}) {\n  if (!filter) {\n    return logs;\n  }\n\n  // regex based filtering\n  if (regexFilterActive) {\n    try {\n      let reg = new RegExp(filter);\n\n      return logs.filter(log => {\n        return log.message.match(reg);\n      });\n    } catch (error) {\n      return logs\n    }\n  }\n\n  // string matching based filtering\n  return logs.filter(log => {\n    return log.message.includes(filter);\n  });\n}\n\nfunction LogPreview(props) {\n  let rawLogs = props.files.reduce((result, file) => {\n        let rawLogLines = file.content.trim().split('\\n');\n\n        result.push(...rawLogLines);\n        return result;\n      }, []),\n      logs = rawLogs.map(parseRawLogLine).sort((a, b) => a.timestamp - b.timestamp);\n\n  // let inLocalStorage = localStorage.hasOwnProperty('logs');\n  // if (logs.length && !inLocalStorage) {\n  //   localStorage.setItem('logs', JSON.stringify(logs));\n  // } else if (!logs.length && inLocalStorage) {\n  //   logs = JSON.parse(localStorage.getItem('logs'));\n  // }\n\n  const [filter, updateFilter] = useState('');\n  const onFilterChange = useCallback((event) => {\n    updateFilter(event.target.value);\n  }, [])\n\n  const [regexFilterActive, updateRegexFilter] = useState(false);\n  const onClickRegexFilter = useCallback(() => {\n    updateRegexFilter(!regexFilterActive);\n  });\n  const regexFilterClassNames = ['regex'];\n  if (regexFilterActive) {\n    regexFilterClassNames.push('active');\n  }\n\n  if (filter) {\n    logs = getFilteredLogs(logs, filter, {regexFilterActive});\n  }\n\n  return (\n    <div className=\"postman-log-preview\">\n      <div className=\"log-header\">\n        <div className=\"filter-group\">\n          <span className={regexFilterClassNames.join(' ')} onClick={onClickRegexFilter}>.*</span>\n          <input\n            className=\"filter-input\"\n            value={filter}\n            placeholder=\"Search\"\n            onChange={onFilterChange}/>\n        </div>\n      </div>\n      <div className=\"log-body\">\n        {\n          logs.map((log,index) => {\n            return <Log\n              key={index}\n              pId={log.pid}\n              process={log.process}\n              timestamp={log.timestamp}\n              level={log.level}\n              message={log.message}\n            />\n          })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default LogPreview;\n","import React from 'react'\nimport { NativeTypes } from 'react-dnd-html5-backend'\nimport { useDrop } from 'react-dnd'\n\nconst baseStyle = {\n  height: '100vh',\n  width: '100vw',\n  display: 'flex',\n  fontSize: '30px'\n}\nconst textStyle = {\n  margin: 'auto'\n};\n\nconst TargetBox = (props) => {\n  const { onDrop } = props\n  const [{ canDrop, isOver }, drop] = useDrop({\n    accept: [NativeTypes.FILE],\n    drop(item, monitor) {\n      if (onDrop) {\n        onDrop(props, monitor)\n      }\n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    }),\n  })\n  const isActive = canDrop && isOver\n  const boxStyle = Object.assign({}, baseStyle, {position: isActive ? 'static' : 'absolute' });\n\n  return (\n    <div ref={drop} style={boxStyle}>\n      <span style={textStyle}>\n        {isActive ? 'Release to drop' : ''}<br/>\n      </span>\n    </div>\n  )\n}\nexport default TargetBox","import React, {useState, useCallback} from 'react';\nimport './App.css';\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport LogPreview from \"./containers/LogPreview\";\nimport DropTarget from \"./components/DropTarget\"\n\n\nfunction App() {\n  let [files, updateFiles] = useState([]);\n\n  let onDrop = useCallback((item, monitor) => {\n    let filesUploaded = monitor.getItem().files;\n\n    filesUploaded.forEach(file => {\n      let fileName = file.name,\n          reader = new FileReader();\n\n      reader.onload = function (event) {\n        let content = event.target.result;\n        updateFiles(files.concat({fileName, content }))\n      };\n      reader.readAsText(file);\n    });\n  })\n\n  return (\n    <div className=\"App\">\n      <h1>Postman Logs</h1>\n      <DndProvider backend={Backend}>\n        <DropTarget onDrop={onDrop}/>\n        <LogPreview files={files}/>\n      </DndProvider>\n    </div>\n    );\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}